openapi: 3.0.3
info:
  title: User Management API
  description: |
    Demo project showcasing Java Spring Boot with TypeScript Cucumber black box testing.
    This API provides CRUD operations for user management with comprehensive monitoring capabilities.
  version: 0.0.1-SNAPSHOT
  contact:
    name: Demo Team
  license:
    name: MIT
servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.example.com
    description: Production server
    
paths:
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users in the system
      operationId: getAllUsers
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
              examples:
                empty_list:
                  summary: Empty user list
                  value: []
                multiple_users:
                  summary: Multiple users
                  value:
                    - id: 1
                      name: "John Doe"
                      email: "john@example.com"
                      bio: "Software developer"
                    - id: 2
                      name: "Jane Smith"
                      email: "jane@example.com"
                      bio: "Product manager"
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user with the provided information
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
            examples:
              valid_user:
                summary: Valid user data
                value:
                  name: "John Doe"
                  email: "john@example.com"
                  bio: "Software developer"
              minimal_user:
                summary: Minimal required data
                value:
                  name: "Jane Smith"
                  email: "jane@example.com"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                created_user:
                  summary: Successfully created user
                  value:
                    id: 1
                    name: "John Doe"
                    email: "john@example.com"
                    bio: "Software developer"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their unique identifier
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1
      responses:
        '200':
          description: User found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                existing_user:
                  summary: Existing user
                  value:
                    id: 1
                    name: "John Doe"
                    email: "john@example.com"
                    bio: "Software developer"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      tags:
        - Users
      summary: Update an existing user
      description: Update an existing user's information
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user to update
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
            examples:
              update_user:
                summary: Updated user data
                value:
                  name: "John Doe Updated"
                  email: "john.updated@example.com"
                  bio: "Senior software developer"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                updated_user:
                  summary: Successfully updated user
                  value:
                    id: 1
                    name: "John Doe Updated"
                    email: "john.updated@example.com"
                    bio: "Senior software developer"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Delete a user from the system
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user to delete
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:
  schemas:
    UserCreateRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 100
          description: User's email address
          example: "john@example.com"
        bio:
          type: string
          maxLength: 200
          description: User's biography (optional)
          example: "Software developer with 5 years of experience"
          nullable: true
      example:
        name: "John Doe"
        email: "john@example.com"
        bio: "Software developer"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
          example: 1
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john@example.com"
        bio:
          type: string
          description: User's biography
          example: "Software developer"
          nullable: true
      example:
        id: 1
        name: "John Doe"
        email: "john@example.com"
        bio: "Software developer"

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2023-12-01T10:30:00Z"
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error type
          example: "Bad Request"
        message:
          type: string
          description: Human-readable error message
          example: "Validation failed"
        path:
          type: string
          description: The request path that caused the error
          example: "/api/users"
        validationErrors:
          type: array
          items:
            type: string
          description: List of validation error messages
          example: ["Name is required", "Email should be valid"]
          nullable: true
      example:
        timestamp: "2023-12-01T10:30:00Z"
        status: 400
        error: "Bad Request"
        message: "Validation failed"
        path: "/api/users"
        validationErrors: ["Name is required"]



  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validation_error:
              summary: Validation failed
              value:
                timestamp: "2023-12-01T10:30:00Z"
                status: 400
                error: "Bad Request"
                message: "Validation failed"
                path: "/api/users"
                validationErrors: ["Name is required", "Email should be valid"]

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            user_not_found:
              summary: User not found
              value:
                timestamp: "2023-12-01T10:30:00Z"
                status: 404
                error: "Not Found"
                message: "User not found with id: 999"
                path: "/api/users/999"

    Conflict:
      description: Resource conflict (e.g., duplicate email)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            duplicate_email:
              summary: Email already exists
              value:
                timestamp: "2023-12-01T10:30:00Z"
                status: 409
                error: "Conflict"
                message: "User with email john@example.com already exists"
                path: "/api/users"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            server_error:
              summary: Internal server error
              value:
                timestamp: "2023-12-01T10:30:00Z"
                status: 500
                error: "Internal Server Error"
                message: "An unexpected error occurred"
                path: "/api/users"

  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: Unique identifier of the user
      schema:
        type: integer
        format: int64
        minimum: 1
      example: 1

tags:
  - name: Users
    description: User management operations